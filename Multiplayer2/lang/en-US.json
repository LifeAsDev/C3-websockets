{
	"$schema": "../../plugin.lang.schema.json",

	"languageTag": "en-US",
	"fileDescription": "Strings for MyCustomPlugin.",
	"text": {
		"plugins": {
			"lifeasdev_multiplayerplugin": {
				"name": "Multiplayer2",
				"description": "Multiplayer2 with multiple room connections",
				"help-url": "https://www.construct.net",
				"aceCategories": {
					"signalling": "Signalling",
					"roomHost": "Room: Host",
					"roomClient": "Room: Client",
					"room": "Room"
				},
				"conditions": {
					"onConnectedToSgWs": {
						"list-name": "On Connected",
						"display-text": "On signalling connected",
						"description": "Triggered when connected to the signalling."
					},
					"onLoggedInToSgWs": {
						"list-name": "On Logged In",
						"display-text": "On signalling logged in",
						"description": "Triggered when logged in to the signalling."
					},
					"onJoinedRoom": {
						"list-name": "On Joined Room",
						"display-text": "On joined room",
						"description": "Triggered when successfully joined a room."
					},
					"onPeerMessage": {
						"list-name": "On Peer Message",
						"display-text": "On peer message with tag [i]{0}[/i]",
						"description": "Triggered when a message is received.",
						"params": {
							"tag": {
								"name": "Tag",
								"desc": "tag to identify message."
							}
						}
					},
					"onAnyPeerMessage": {
						"list-name": "On Any Peer Message",
						"display-text": "On any peer message received",
						"description": "Triggered when any message is received from a peer, regardless of the tag."
					},
					"isHost": {
						"list-name": "Is Host",
						"display-text": "Is host clientTag [i]{0}[/i]",
						"description": "Returns true if the client tag is host.",
						"params": {
							"tag": {
								"name": "Tag",
								"desc": "Client Tag."
							}
						}
					},
					"onPeerConnected": {
						"list-name": "On Peer Connected",
						"display-text": "On peer connected",
						"description": "Triggered on peer connected to host."
					},
					"onDisconnectedFromSignalling": {
						"list-name": "On Disconnected From Signalling",
						"display-text": "Disconnected From signalling",
						"description": "Triggered on disconnected from signalling server"
					},
					"onPeerDisconnected": {
						"list-name": "On Peer Disconnected",
						"display-text": "On Peer Disconnected",
						"description": "Triggered when peer disconnect (either from host or a peer leaving the host)."
					},
					"isConnected": {
						"list-name": "Is Connected",
						"display-text": "Is Connected (Client Tag [i]{0}[/i])",
						"description": "True if connected to a signalling server",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							}
						}
					},
					"isLoggedIn": {
						"list-name": "Is logged in",
						"display-text": "Is logged in (Client Tag [i]{0}[/i])",
						"description": "True if logged in to a signalling server",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							}
						}
					},
					"onLeftRoom": {
						"list-name": "On Left Room",
						"display-text": "On Left Room",
						"description": "On left room on signalling server"
					},
					"onKicked": {
						"list-name": "On Kicked",
						"display-text": "On Kicked",
						"description": "Triggered when kicked from a room"
					},
					"isInRoom": {
						"list-name": "Is in room",
						"display-text": "Is in room clientTag [i]{0}[/i]",
						"description": "Returns true if the client tag is in a room.",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag."
							}
						}
					},
					"onError": {
						"list-name": "On error",
						"display-text": "On signalling error",
						"description": "Triggered if an error occurs with the signalling server. The ErrorMessage expression indicates the type of error that occurred."
					},
					"onRoomList": {
						"list-name": "On Room List",
						"display-text": "On Room List",
						"description": "Triggered when the room list is received from the signalling server. The RoomList expression contains the list of rooms."
					},
					"onInstanceList": {
						"list-name": "On Instance List",
						"display-text": "On Instance List",
						"description": "Triggered when a request instance list is completed."
					}
				},
				"actions": {
					"connect": {
						"list-name": "Connect to signalling server",
						"display-text": "Connect to signalling server at [i]{0}[/i] clientTag [i]{1}[/i]",
						"description": "Connect to the signalling server.",
						"params": {
							"url": {
								"name": "URL",
								"desc": "The URL of the signalling server to connect to."
							},
							"tag": {
								"name": "Tag",
								"desc": "Client Tag. Create if not found."
							}
						}
					},
					"log-in": {
						"list-name": "Log in",
						"display-text": "Log in with alias [i]{0}[/i] clientTag [i]{1}[/i]",
						"description": "Log in to the signalling server with a alias.",
						"params": {
							"alias": {
								"name": "Alias",
								"desc": "The alias to log in with."
							},
							"tag": {
								"name": "Tag",
								"desc": "Client Tag. Ignored if not found."
							}
						}
					},
					"join-room": {
						"list-name": "Join room",
						"display-text": "Join room [i]{2}[/i] Game [i]{0}[/i] Instance [i]{1}[/i] max-peers [i]{4}[/i] clientTag [i]{3}[/i]",
						"description": "Join a room on the signalling server.",
						"params": {
							"game": {
								"name": "Game",
								"desc": "The name of the game to join."
							},
							"instance": {
								"name": "Instance",
								"desc": "The name of the instance to join."
							},
							"room": {
								"name": "Room",
								"desc": "The name of the room to join."
							},
							"tag": {
								"name": "Tag",
								"desc": "Client Tag. Ignored if not found."
							},
							"max-peers": {
								"name": "Max Peers",
								"desc": "The maximum number of peers allowed in the room. Leave 0 to ignore."
							}
						}
					},
					"auto-join-room": {
						"list-name": "Auto join room",
						"display-text": "Join room [i]{2}[/i] Game [i]{0}[/i] Instance [i]{1}[/i] max-peers [i]{4}[/i] locking [i]{5}[/i] clientTag [i]{3}[/i]",
						"description": "Automatically join a room on the signalling server.",
						"params": {
							"game": {
								"name": "Game",
								"desc": "The name of the game to auto join."
							},
							"instance": {
								"name": "Instance",
								"desc": "The name of the instance to auto join."
							},
							"room": {
								"name": "Room",
								"desc": "The name of the room to auto join."
							},
							"tag": {
								"name": "Tag",
								"desc": "Client Tag. Ignored if not found."
							},
							"max-peers": {
								"name": "Max Peers",
								"desc": "The maximum number of peers allowed in the room. Leave 0 to ignore."
							},
							"locking": {
								"name": "Locking",
								"desc": "If true, the room will be locked to prevent new peers from joining.",
								"items": {
									"true": "Yes",
									"false": "No"
								}
							}
						}
					},
					"sendMessage": {
						"list-name": "Send message to peer",
						"display-text": "Send message [i]{3}[/i] to peer [i]{0}[/i] tag [i]{1}[/i] clientTag [i]{2}[/i] mode [i]{4}[/i]",
						"description": "Send a message to a peer in the room.",
						"params": {
							"peerId": {
								"name": "Peer ID",
								"desc": "The ID of the peer to send the message to."
							},
							"tag": {
								"name": "Tag",
								"desc": "tag to identify message."
							},
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							},
							"message": {
								"name": "Message",
								"desc": "The message to send."
							},
							"mode": {
								"name": "Mode",
								"desc": "Transmision mode of the message.",
								"items": {
									"orderedReliable": "Reliable ordered",
									"unorderedReliable": "Reliable unordered",
									"unreliable": "Unreliable"
								}
							}
						}
					},
					"simulateLatency": {
						"list-name": "Simulate Latency",
						"display-text": "Simulate network conditions: latency [i]{0}[/i] ms, jitter [i]{1}[/i] ms, packet loss [i]{2}[/i]% client tag [i]{3}[/i]",
						"description": "Set artificial latency, jitter (PDV) and packet loss percentage for network simulation.",
						"params": {
							"latencyMs": {
								"name": "Latency (ms)",
								"desc": "The artificial latency in milliseconds."
							},
							"pdvMs": {
								"name": "Jitter (ms)",
								"desc": "The packet delay variation (jitter) in milliseconds."
							},
							"lossPercent": {
								"name": "Packet loss (%)",
								"desc": "The percentage of simulated packet loss."
							},
							"clientTag": {
								"name": "Client Tag",
								"desc": "The client tag. Ignored if not found."
							}
						}
					},
					"broadcastMessage": {
						"list-name": "Broadcast Message",
						"display-text": "Broadcast tag [i]{1}[/i] message [i]{3}[/i] (from [i]{0}[/i], Client Tag [i]{2}[/i], mode [i]{4}[/i])",
						"description": "Send a message to a peer in the room.",
						"params": {
							"peerId": {
								"name": "Peer ID",
								"desc": "The ID of the peer origin. blank to indicate from host."
							},
							"tag": {
								"name": "Tag",
								"desc": "tag to identify message."
							},
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							},
							"message": {
								"name": "Message",
								"desc": "The message to send."
							},
							"mode": {
								"name": "Mode",
								"desc": "Transmision mode of the message.",
								"items": {
									"orderedReliable": "Reliable ordered",
									"unorderedReliable": "Reliable unordered",
									"unreliable": "Unreliable"
								}
							}
						}
					},
					"disconnectFromRoom": {
						"list-name": "Disconnect from room",
						"display-text": "Disconnect from room Client Tag [i]{0}[/i]",
						"description": "Disconnect from room",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							}
						}
					},
					"disconnectFromSignalling": {
						"list-name": "Disconnect from signalling",
						"display-text": "Disconnect from signalling server Client Tag [i]{0}[/i]",
						"description": "Disconnect from signalling server",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							}
						}
					},
					"leaveRoomOnSignalling": {
						"list-name": "Leave room on signalling",
						"display-text": "Leave room on signalling Client Tag [i]{0}[/i]",
						"description": "Leave room on signalling server (room connection remain)",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							}
						}
					},
					"kickPeer": {
						"list-name": "Kick peer from room",
						"display-text": "Kick peer [i]{0}[/i] Client Tag [i]{2}[/i](reason: [i]{1}[/i]",
						"description": "Leave room on signalling server (room connection remain)",
						"params": {
							"peerId": {
								"name": "PeerID",
								"desc": "ID to identify peer."
							},
							"reason": {
								"name": "Reason",
								"desc": "Reason message for peer"
							},
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							}
						}
					},
					"requestRoomList": {
						"list-name": "Request Room List",
						"display-text": "Request room list from signalling server Client Tag [i]{0}[/i] game [i]{1}[/i] instance [i]{2}[/i] which [i]{3}[/i]",
						"description": "Request the room list from the signalling server.",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							},
							"game": {
								"name": "Game",
								"desc": "The name of the game to filter rooms by."
							},
							"instance": {
								"name": "Instance",
								"desc": "The name of the instance to filter rooms by."
							},
							"which": {
								"name": "Which",
								"desc": "return rooms by state",
								"items": {
									"all": "all",
									"unlocked": "unlocked",
									"available": "available"
								}
							}
						}
					},
					"requestInstanceList": {
						"list-name": "Request Instance List",
						"display-text": "Request instance list from signalling server Client Tag [i]{0}[/i] game [i]{1}[/i]",
						"description": "Request the instance list from the signalling server.",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. Ignored if not found."
							},
							"game": {
								"name": "Game",
								"desc": "The name of the game to filter instances by."
							}
						}
					}
				},
				"expressions": {
					"message": {
						"translated-name": "Message",
						"description": "Returns the message of the revelant trigger."
					},
					"messageTag": {
						"translated-name": "Message Tag",
						"description": "Returns the message tag of the revelant trigger."
					},
					"peerId": {
						"translated-name": "PeerID",
						"description": "Returns the peer ID of the revelant trigger."
					},
					"clientTag": {
						"translated-name": "ClientTag",
						"description": "Returns the client tag of the revelant trigger."
					},
					"myId": {
						"translated-name": "MyID",
						"description": "Returns the ID of the client tag.",
						"params": {
							"tag": {
								"name": "Tag",
								"desc": "Client Tag. return emtpy string if not found."
							}
						}
					},
					"hostId": {
						"translated-name": "HostID",
						"description": "Returns the host ID of the client tag.",
						"params": {
							"tag": {
								"name": "Tag",
								"desc": "Client Tag. return emtpy string if not found."
							}
						}
					},
					"peerAlias": {
						"translated-name": "PeerAlias",
						"description": "Returns the peer alias of the revelant trigger"
					},
					"leaveReason": {
						"translated-name": "LeaveReason",
						"description": "Returns in 'On Peer Disconnected', the leave reason if known",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. return emtpy string if not found."
							}
						}
					},
					"errorMessage": {
						"translated-name": "ErrorMessage",
						"description": "In On signalling error, the error message if available."
					},
					"currentGame": {
						"translated-name": "CurrentGame",
						"description": "Returns the Game of the client tag.",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. return emtpy string if not found."
							}
						}
					},
					"currentInstance": {
						"translated-name": "CurrentInstance",
						"description": "Returns the Instance of the client tag.",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. return emtpy string if not found."
							}
						}
					},
					"currentRoom": {
						"translated-name": "CurrentRoom",
						"description": "Returns the Room name of the client tag.",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "Client Tag. return emtpy string if not found."
							}
						}
					},
					"listRoomCount": {
						"translated-name": "ListRoomCount",
						"description": "After On Room List, the number of rooms in the received list."
					},
					"listRoomName": {
						"translated-name": "ListRoomName",
						"description": "Returns the name of the room at the specified index in the received list.",
						"params": {
							"index": {
								"name": "Index",
								"desc": "The index of the room in the list."
							}
						}
					},
					"listRoomPeerCount": {
						"translated-name": "ListRoomPeerCount",
						"description": "Returns the number of peers in the room at the specified index in the received list.",
						"params": {
							"index": {
								"name": "Index",
								"desc": "The index of the room in the list."
							}
						}
					},
					"listRoomMaxPeerCount": {
						"translated-name": "ListRoomMaxPeerCount",
						"description": "Returns the maximum number of peers allowed in the room at the specified index in the received list.",
						"params": {
							"index": {
								"name": "Index",
								"desc": "The index of the room in the list."
							}
						}
					},
					"listRoomState": {
						"translated-name": "ListRoomState",
						"description": "Returns the state of the room at the specified index in the received list.",
						"params": {
							"index": {
								"name": "Index",
								"desc": "The index of the room in the list."
							}
						}
					},
					"listInstanceCount": {
						"translated-name": "ListInstanceCount",
						"description": "After On game instance list triggers, the number of game instances in the received list."
					},
					"listInstanceName": {
						"translated-name": "ListInstanceName",
						"description": "Returns the name of the game instance at the specified index in the received list.",
						"params": {
							"index": {
								"name": "Index",
								"desc": "The index of the game instance in the list."
							}
						}
					},
					"listInstancePeerCount": {
						"translated-name": "ListInstancePeerCount",
						"description": "Returns the number of peers in the game instance at the specified index in the received list.",
						"params": {
							"index": {
								"name": "Index",
								"desc": "The index of the game instance in the list."
							}
						}
					},
					"peerCount": {
						"translated-name": "PeerCount",
						"description": "Returns the number of peers connected in the current room.",
						"params": {
							"clientTag": {
								"name": "Client Tag",
								"desc": "The client tag to identify the room."
							}
						}
					}
				}
			}
		}
	}
}
